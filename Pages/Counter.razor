@page "/counter"

@implements IDisposable

@using blazor_experiment.Data
@inject AssetService AssetService

<h1>Counter</h1>

<p>Current count: @currentCount</p>

@foreach (var asset in assets)
{
    <p>@asset.Path</p>
    <img src="/api/asset/thumbnail/@asset.Guid" />
}

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<VirtualList Items="@Rows" TItem="Row">
    <RowTemplate>
        <p>@context.PetId</p>
        <p>@context.Name</p>
    </RowTemplate>
</VirtualList>

@code {

    class Row
    {
        public string PetId { get; set; }
        public string Name { get; set; }
    }

    IList<Row> Rows = new List<Row>();

    Asset[] assets;

    protected override async Task OnInitializedAsync()
    {
        assets = await AssetService.GetAssets();
        AssetService.Changed += AssetService_Changed;
    }

    protected override void OnParametersSet()
    {
        for (int i = 0; i < 1000; i++)
            Rows.Add(new Row { PetId = $"{i.ToString()}", Name = $"{i.ToString()}" });
    }

    int currentCount = 0;

    void IncrementCount()
    {
        currentCount++;
    }

    private void AssetService_Changed(object sender, EventArgs e)
    {
        this.InvokeAsync(async () =>
        {
            assets = await AssetService.GetAssets();
            base.StateHasChanged();
        });
    }

    public void Dispose()
    {
        AssetService.Changed -= AssetService_Changed;
    }
}
